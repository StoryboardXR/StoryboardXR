#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 2.0 (448.60.4)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["Center", "NegZ", "X", "Y"]
    def Sphere "Center" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Center/DefaultMaterial>
        double radius = 0.07
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/Center/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.999996, 1, 1) (
                    colorSpace = "srgb_texture"
                )
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }

    def Cylinder "NegZ" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        customData = {
            float3 rotationEulerHint = (1.5707964, 0, 0)
        }
    )
    {
        uniform token axis = "Y"
        double height = 0.4
        rel material:binding = </Root/NegZ/DefaultMaterial>
        double radius = 0.05
        quatf xformOp:orient = (0.70710677, 0.70710677, 0, 0)
        float3 xformOp:translate = (8.335337e-8, 2.7939677e-8, -0.2)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/NegZ/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0, 0.47843137, 1) (
                    colorSpace = "srgb_texture"
                )
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }

    def Cylinder "X" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        customData = {
            float3 rotationEulerHint = (0, 0, 1.5707964)
        }
    )
    {
        uniform token axis = "Y"
        double height = 0.4
        rel material:binding = </Root/X/DefaultMaterial>
        double radius = 0.05
        float2 ui:nodegraph:node:pos = (20, 20)
        int ui:nodegraph:node:stackingOrder = 1
        quatf xformOp:orient = (0.70710677, 0, 0, 0.70710677)
        float3 xformOp:scale = (0.9999998, 0.9999998, 0.9999998)
        float3 xformOp:translate = (0.2, 2.7939677e-8, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/X/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 0.23137255, 0.1882353) (
                    colorSpace = "srgb_texture"
                )
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }

    def Cylinder "Y" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        customData = {
            float3 rotationEulerHint = (0, 0, 0)
        }
    )
    {
        uniform token axis = "Y"
        double height = 0.4
        rel material:binding = </Root/Y/DefaultMaterial>
        double radius = 0.05
        float2 ui:nodegraph:node:pos = (40, 40)
        int ui:nodegraph:node:stackingOrder = 2
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.99999964, 0.99999964, 0.99999964)
        float3 xformOp:translate = (8.335337e-8, 0.2, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/Y/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.15686275, 0.8039216, 0.25490198) (
                    colorSpace = "srgb_texture"
                )
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }

    def RealityKitComponent "Collider"
    {
        uint group = 1
        uniform token info:id = "RealityKit.Collider"
        uint mask = 4294967295
        token type = "Default"

        def RealityKitStruct "Shape"
        {
            float3 extent = (0.46999997, 0.4699999, 0.46999997)
            token shapeType = "Box"

            def RealityKitStruct "pose"
            {
                float3 position = (0.16499999, 0.16499996, -0.16499999)
            }
        }
    }

    def RealityKitComponent "InputTarget"
    {
        uniform token info:id = "RealityKit.InputTarget"
    }
}

